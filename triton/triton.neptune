<?php
//#!/usr/bin/php
//#!/usr/bin/env php

require 'config/config.triton.php';
require 'triton/tritonmigration.php';
require 'triton/tritontable.php';
require 'triton/tritoncolumn.php';
require 'triton/triton.php';

function readlineTriton($prompt = null)
{
    if($prompt)
    {
        echo $prompt;
    }
    $fp = fopen('php://stdin','r');
    $line = rtrim(fgets($fp, 1024));
    return $line;
}
if($argv[1] == '--migration:create')
{
    $database = isset($argv[2]) ? $argv[2] : die('Database is null!');
    $tableName = isset($argv[3]) ? $argv[3] : die('Table is null!');
    $prefix = '../';
    require $prefix . $configs['databases'];
    require $prefix . $configs['migrations'] . '/'. $database . '/' . $tableName . '.php';

    $table = @call_user_func_array([$configs['migrationsNamespace'] . '\\' . ucfirst($tableName), 'table'], [new \TritonTable()]);
    switch ($databases[$database]['driver']) {
        case 'mysql' :
        $sqlString = 'CREATE TABLE IF NOT EXISTS ' . $tableName . ' ( ' . "\r\n";
        $sqlStringEnd = '';
        foreach ($table->variables as $typeKey => $typeValue)
        {
            foreach ($typeValue as $columnKey => $columnValue) {
                if (!empty($columnValue['length'])) {
                    $sqlString .= $columnValue['name'] . ' ' . $typeKey . '(' . $columnValue['length'] . ') ';
                } else {
                    $sqlString .= $columnValue['name'] . ' ' . $typeKey . ' ';
                }
                if (isset($columnValue['class']) && is_object($columnValue['class'])) {
                    foreach ($columnValue['class']->properties as $propkey => $propValue) {
                        $sqlString .= ' ' . $propValue . ' ';
                    }
                    foreach ($columnValue['class']->sqlEnd as $sqlEndValue) {
                        $sqlStringEnd .= ', ' . $sqlEndValue . ' ';
                    }
                }
                $sqlString .= ', ';
            }
        }
        $sqlString = rtrim($sqlString, ', ');
        $sqlStringEnd .= ')';
        foreach ($table->sqlEnd as $sqlEndValue) {
            $sqlStringEnd .= ' ' . $sqlEndValue . ' ';
        }
        $sqlString .= $sqlStringEnd;
        (new PDO('mysql:host=' . $databases[$database]['host'] . ';dbname=' . $database . ';charset='. $databases[$database]['charset'], $databases[$database]['user'], $databases[$database]['pass']))->exec($sqlString);
        echo $sqlString;
        break;
    }
    foreach (glob('../' . $configs['models'] . '/*') as $model)
    {
        require_once $model;
    }
    @call_user_func([$configs['migrationsNamespace'] . '\\' . ucfirst($tableName), 'up']);

}
else
{
    echo '"'. $argv[1] .'" isn\'t recognized.';
}